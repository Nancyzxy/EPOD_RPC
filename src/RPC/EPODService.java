/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package RPC;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.0)", date = "2023-04-09")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class EPODService {

  /**
   * Ahh, now onto the cool part, defining a service. Services just need a name
   * and can optionally inherit from another service using the extends keyword.
   */
  public interface Iface {

    /**
     * A method definition looks like C code. It has a return type, arguments,
     * and optionally a list of exceptions that it may throw. Note that argument
     * lists and exception lists are specified using the exact same syntax as
     * field lists in struct or exception definitions.
     * 
     * @param fingerprints
     * @param edgeDeviceHashCode
     */
    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode) throws InvalidException, org.apache.thrift.TException;

    public void processResult(java.util.List<java.lang.Double> unitID, java.util.List<UnitInNode> unitInNodeList) throws org.apache.thrift.TException;

    public void provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash) throws org.apache.thrift.TException;

    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> sendData(java.util.Set<java.util.List<java.lang.Double>> bucketIds, int deviceHashCode) throws org.apache.thrift.TException;

    public void getExternalData(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status, java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result) throws InvalidException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void processResult(java.util.List<java.lang.Double> unitID, java.util.List<UnitInNode> unitInNodeList, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sendData(java.util.Set<java.util.List<java.lang.Double>> bucketIds, int deviceHashCode, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>> resultHandler) throws org.apache.thrift.TException;

    public void getExternalData(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status, java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode) throws InvalidException, org.apache.thrift.TException
    {
      send_receiveAndProcessFP(fingerprints, edgeDeviceHashCode);
      recv_receiveAndProcessFP();
    }

    public void send_receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode) throws org.apache.thrift.TException
    {
      receiveAndProcessFP_args args = new receiveAndProcessFP_args();
      args.setFingerprints(fingerprints);
      args.setEdgeDeviceHashCode(edgeDeviceHashCode);
      sendBase("receiveAndProcessFP", args);
    }

    public void recv_receiveAndProcessFP() throws InvalidException, org.apache.thrift.TException
    {
      receiveAndProcessFP_result result = new receiveAndProcessFP_result();
      receiveBase(result, "receiveAndProcessFP");
      if (result.invalid != null) {
        throw result.invalid;
      }
      return;
    }

    @Override
    public void processResult(java.util.List<java.lang.Double> unitID, java.util.List<UnitInNode> unitInNodeList) throws org.apache.thrift.TException
    {
      send_processResult(unitID, unitInNodeList);
      recv_processResult();
    }

    public void send_processResult(java.util.List<java.lang.Double> unitID, java.util.List<UnitInNode> unitInNodeList) throws org.apache.thrift.TException
    {
      processResult_args args = new processResult_args();
      args.setUnitID(unitID);
      args.setUnitInNodeList(unitInNodeList);
      sendBase("processResult", args);
    }

    public void recv_processResult() throws org.apache.thrift.TException
    {
      processResult_result result = new processResult_result();
      receiveBase(result, "processResult");
      return;
    }

    @Override
    public void provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash) throws org.apache.thrift.TException
    {
      send_provideNeighborsResult(unSateUnits, edgeNodeHash);
      recv_provideNeighborsResult();
    }

    public void send_provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash) throws org.apache.thrift.TException
    {
      provideNeighborsResult_args args = new provideNeighborsResult_args();
      args.setUnSateUnits(unSateUnits);
      args.setEdgeNodeHash(edgeNodeHash);
      sendBase("provideNeighborsResult", args);
    }

    public void recv_provideNeighborsResult() throws org.apache.thrift.TException
    {
      provideNeighborsResult_result result = new provideNeighborsResult_result();
      receiveBase(result, "provideNeighborsResult");
      return;
    }

    @Override
    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> sendData(java.util.Set<java.util.List<java.lang.Double>> bucketIds, int deviceHashCode) throws org.apache.thrift.TException
    {
      send_sendData(bucketIds, deviceHashCode);
      return recv_sendData();
    }

    public void send_sendData(java.util.Set<java.util.List<java.lang.Double>> bucketIds, int deviceHashCode) throws org.apache.thrift.TException
    {
      sendData_args args = new sendData_args();
      args.setBucketIds(bucketIds);
      args.setDeviceHashCode(deviceHashCode);
      sendBase("sendData", args);
    }

    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> recv_sendData() throws org.apache.thrift.TException
    {
      sendData_result result = new sendData_result();
      receiveBase(result, "sendData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendData failed: unknown result");
    }

    @Override
    public void getExternalData(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status, java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result) throws InvalidException, org.apache.thrift.TException
    {
      send_getExternalData(status, result);
      recv_getExternalData();
    }

    public void send_getExternalData(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status, java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result) throws org.apache.thrift.TException
    {
      getExternalData_args args = new getExternalData_args();
      args.setStatus(status);
      args.setResult(result);
      sendBase("getExternalData", args);
    }

    public void recv_getExternalData() throws InvalidException, org.apache.thrift.TException
    {
      getExternalData_result result = new getExternalData_result();
      receiveBase(result, "getExternalData");
      if (result.invalid != null) {
        throw result.invalid;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void receiveAndProcessFP(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      receiveAndProcessFP_call method_call = new receiveAndProcessFP_call(fingerprints, edgeDeviceHashCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class receiveAndProcessFP_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints;
      private int edgeDeviceHashCode;
      public receiveAndProcessFP_call(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints, int edgeDeviceHashCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fingerprints = fingerprints;
        this.edgeDeviceHashCode = edgeDeviceHashCode;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("receiveAndProcessFP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        receiveAndProcessFP_args args = new receiveAndProcessFP_args();
        args.setFingerprints(fingerprints);
        args.setEdgeDeviceHashCode(edgeDeviceHashCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws InvalidException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_receiveAndProcessFP();
        return null;
      }
    }

    @Override
    public void processResult(java.util.List<java.lang.Double> unitID, java.util.List<UnitInNode> unitInNodeList, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      processResult_call method_call = new processResult_call(unitID, unitInNodeList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class processResult_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<java.lang.Double> unitID;
      private java.util.List<UnitInNode> unitInNodeList;
      public processResult_call(java.util.List<java.lang.Double> unitID, java.util.List<UnitInNode> unitInNodeList, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unitID = unitID;
        this.unitInNodeList = unitInNodeList;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("processResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        processResult_args args = new processResult_args();
        args.setUnitID(unitID);
        args.setUnitInNodeList(unitInNodeList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_processResult();
        return null;
      }
    }

    @Override
    public void provideNeighborsResult(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      provideNeighborsResult_call method_call = new provideNeighborsResult_call(unSateUnits, edgeNodeHash, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class provideNeighborsResult_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.List<java.util.List<java.lang.Double>> unSateUnits;
      private int edgeNodeHash;
      public provideNeighborsResult_call(java.util.List<java.util.List<java.lang.Double>> unSateUnits, int edgeNodeHash, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.unSateUnits = unSateUnits;
        this.edgeNodeHash = edgeNodeHash;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("provideNeighborsResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        provideNeighborsResult_args args = new provideNeighborsResult_args();
        args.setUnSateUnits(unSateUnits);
        args.setEdgeNodeHash(edgeNodeHash);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_provideNeighborsResult();
        return null;
      }
    }

    @Override
    public void sendData(java.util.Set<java.util.List<java.lang.Double>> bucketIds, int deviceHashCode, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendData_call method_call = new sendData_call(bucketIds, deviceHashCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>> {
      private java.util.Set<java.util.List<java.lang.Double>> bucketIds;
      private int deviceHashCode;
      public sendData_call(java.util.Set<java.util.List<java.lang.Double>> bucketIds, int deviceHashCode, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bucketIds = bucketIds;
        this.deviceHashCode = deviceHashCode;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendData_args args = new sendData_args();
        args.setBucketIds(bucketIds);
        args.setDeviceHashCode(deviceHashCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendData();
      }
    }

    @Override
    public void getExternalData(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status, java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getExternalData_call method_call = new getExternalData_call(status, result, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getExternalData_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status;
      private java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result;
      public getExternalData_call(java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status, java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.status = status;
        this.result = result;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getExternalData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getExternalData_args args = new getExternalData_args();
        args.setStatus(status);
        args.setResult(result);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public Void getResult() throws InvalidException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_getExternalData();
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("receiveAndProcessFP", new receiveAndProcessFP());
      processMap.put("processResult", new processResult());
      processMap.put("provideNeighborsResult", new provideNeighborsResult());
      processMap.put("sendData", new sendData());
      processMap.put("getExternalData", new getExternalData());
      return processMap;
    }

    public static class receiveAndProcessFP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, receiveAndProcessFP_args> {
      public receiveAndProcessFP() {
        super("receiveAndProcessFP");
      }

      @Override
      public receiveAndProcessFP_args getEmptyArgsInstance() {
        return new receiveAndProcessFP_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public receiveAndProcessFP_result getResult(I iface, receiveAndProcessFP_args args) throws org.apache.thrift.TException {
        receiveAndProcessFP_result result = new receiveAndProcessFP_result();
        try {
          iface.receiveAndProcessFP(args.fingerprints, args.edgeDeviceHashCode);
        } catch (InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

    public static class processResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, processResult_args> {
      public processResult() {
        super("processResult");
      }

      @Override
      public processResult_args getEmptyArgsInstance() {
        return new processResult_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public processResult_result getResult(I iface, processResult_args args) throws org.apache.thrift.TException {
        processResult_result result = new processResult_result();
        iface.processResult(args.unitID, args.unitInNodeList);
        return result;
      }
    }

    public static class provideNeighborsResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, provideNeighborsResult_args> {
      public provideNeighborsResult() {
        super("provideNeighborsResult");
      }

      @Override
      public provideNeighborsResult_args getEmptyArgsInstance() {
        return new provideNeighborsResult_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public provideNeighborsResult_result getResult(I iface, provideNeighborsResult_args args) throws org.apache.thrift.TException {
        provideNeighborsResult_result result = new provideNeighborsResult_result();
        iface.provideNeighborsResult(args.unSateUnits, args.edgeNodeHash);
        return result;
      }
    }

    public static class sendData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendData_args> {
      public sendData() {
        super("sendData");
      }

      @Override
      public sendData_args getEmptyArgsInstance() {
        return new sendData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public sendData_result getResult(I iface, sendData_args args) throws org.apache.thrift.TException {
        sendData_result result = new sendData_result();
        result.success = iface.sendData(args.bucketIds, args.deviceHashCode);
        return result;
      }
    }

    public static class getExternalData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getExternalData_args> {
      public getExternalData() {
        super("getExternalData");
      }

      @Override
      public getExternalData_args getEmptyArgsInstance() {
        return new getExternalData_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public getExternalData_result getResult(I iface, getExternalData_args args) throws org.apache.thrift.TException {
        getExternalData_result result = new getExternalData_result();
        try {
          iface.getExternalData(args.status, args.result);
        } catch (InvalidException invalid) {
          result.invalid = invalid;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("receiveAndProcessFP", new receiveAndProcessFP());
      processMap.put("processResult", new processResult());
      processMap.put("provideNeighborsResult", new provideNeighborsResult());
      processMap.put("sendData", new sendData());
      processMap.put("getExternalData", new getExternalData());
      return processMap;
    }

    public static class receiveAndProcessFP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, receiveAndProcessFP_args, Void> {
      public receiveAndProcessFP() {
        super("receiveAndProcessFP");
      }

      @Override
      public receiveAndProcessFP_args getEmptyArgsInstance() {
        return new receiveAndProcessFP_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            receiveAndProcessFP_result result = new receiveAndProcessFP_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            receiveAndProcessFP_result result = new receiveAndProcessFP_result();
            if (e instanceof InvalidException) {
              result.invalid = (InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, receiveAndProcessFP_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.receiveAndProcessFP(args.fingerprints, args.edgeDeviceHashCode,resultHandler);
      }
    }

    public static class processResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, processResult_args, Void> {
      public processResult() {
        super("processResult");
      }

      @Override
      public processResult_args getEmptyArgsInstance() {
        return new processResult_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            processResult_result result = new processResult_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            processResult_result result = new processResult_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, processResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.processResult(args.unitID, args.unitInNodeList,resultHandler);
      }
    }

    public static class provideNeighborsResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, provideNeighborsResult_args, Void> {
      public provideNeighborsResult() {
        super("provideNeighborsResult");
      }

      @Override
      public provideNeighborsResult_args getEmptyArgsInstance() {
        return new provideNeighborsResult_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            provideNeighborsResult_result result = new provideNeighborsResult_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            provideNeighborsResult_result result = new provideNeighborsResult_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, provideNeighborsResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.provideNeighborsResult(args.unSateUnits, args.edgeNodeHash,resultHandler);
      }
    }

    public static class sendData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendData_args, java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>> {
      public sendData() {
        super("sendData");
      }

      @Override
      public sendData_args getEmptyArgsInstance() {
        return new sendData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>>() { 
          @Override
          public void onComplete(java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> o) {
            sendData_result result = new sendData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendData_result result = new sendData_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, sendData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>> resultHandler) throws org.apache.thrift.TException {
        iface.sendData(args.bucketIds, args.deviceHashCode,resultHandler);
      }
    }

    public static class getExternalData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getExternalData_args, Void> {
      public getExternalData() {
        super("getExternalData");
      }

      @Override
      public getExternalData_args getEmptyArgsInstance() {
        return new getExternalData_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          @Override
          public void onComplete(Void o) {
            getExternalData_result result = new getExternalData_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getExternalData_result result = new getExternalData_result();
            if (e instanceof InvalidException) {
              result.invalid = (InvalidException) e;
              result.setInvalidIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, getExternalData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.getExternalData(args.status, args.result,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class receiveAndProcessFP_args implements org.apache.thrift.TBase<receiveAndProcessFP_args, receiveAndProcessFP_args._Fields>, java.io.Serializable, Cloneable, Comparable<receiveAndProcessFP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveAndProcessFP_args");

    private static final org.apache.thrift.protocol.TField FINGERPRINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fingerprints", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField EDGE_DEVICE_HASH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeDeviceHashCode", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new receiveAndProcessFP_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new receiveAndProcessFP_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints; // required
    public int edgeDeviceHashCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FINGERPRINTS((short)1, "fingerprints"),
      EDGE_DEVICE_HASH_CODE((short)2, "edgeDeviceHashCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FINGERPRINTS
            return FINGERPRINTS;
          case 2: // EDGE_DEVICE_HASH_CODE
            return EDGE_DEVICE_HASH_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EDGEDEVICEHASHCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FINGERPRINTS, new org.apache.thrift.meta_data.FieldMetaData("fingerprints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.EDGE_DEVICE_HASH_CODE, new org.apache.thrift.meta_data.FieldMetaData("edgeDeviceHashCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveAndProcessFP_args.class, metaDataMap);
    }

    public receiveAndProcessFP_args() {
    }

    public receiveAndProcessFP_args(
      java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints,
      int edgeDeviceHashCode)
    {
      this();
      this.fingerprints = fingerprints;
      this.edgeDeviceHashCode = edgeDeviceHashCode;
      setEdgeDeviceHashCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveAndProcessFP_args(receiveAndProcessFP_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFingerprints()) {
        java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> __this__fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(other.fingerprints.size());
        for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> other_element : other.fingerprints.entrySet()) {

          java.util.List<java.lang.Double> other_element_key = other_element.getKey();
          java.lang.Integer other_element_value = other_element.getValue();

          java.util.List<java.lang.Double> __this__fingerprints_copy_key = new java.util.ArrayList<java.lang.Double>(other_element_key);

          java.lang.Integer __this__fingerprints_copy_value = other_element_value;

          __this__fingerprints.put(__this__fingerprints_copy_key, __this__fingerprints_copy_value);
        }
        this.fingerprints = __this__fingerprints;
      }
      this.edgeDeviceHashCode = other.edgeDeviceHashCode;
    }

    @Override
    public receiveAndProcessFP_args deepCopy() {
      return new receiveAndProcessFP_args(this);
    }

    @Override
    public void clear() {
      this.fingerprints = null;
      setEdgeDeviceHashCodeIsSet(false);
      this.edgeDeviceHashCode = 0;
    }

    public int getFingerprintsSize() {
      return (this.fingerprints == null) ? 0 : this.fingerprints.size();
    }

    public void putToFingerprints(java.util.List<java.lang.Double> key, int val) {
      if (this.fingerprints == null) {
        this.fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>();
      }
      this.fingerprints.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> getFingerprints() {
      return this.fingerprints;
    }

    public receiveAndProcessFP_args setFingerprints(@org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> fingerprints) {
      this.fingerprints = fingerprints;
      return this;
    }

    public void unsetFingerprints() {
      this.fingerprints = null;
    }

    /** Returns true if field fingerprints is set (has been assigned a value) and false otherwise */
    public boolean isSetFingerprints() {
      return this.fingerprints != null;
    }

    public void setFingerprintsIsSet(boolean value) {
      if (!value) {
        this.fingerprints = null;
      }
    }

    public int getEdgeDeviceHashCode() {
      return this.edgeDeviceHashCode;
    }

    public receiveAndProcessFP_args setEdgeDeviceHashCode(int edgeDeviceHashCode) {
      this.edgeDeviceHashCode = edgeDeviceHashCode;
      setEdgeDeviceHashCodeIsSet(true);
      return this;
    }

    public void unsetEdgeDeviceHashCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGEDEVICEHASHCODE_ISSET_ID);
    }

    /** Returns true if field edgeDeviceHashCode is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeDeviceHashCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGEDEVICEHASHCODE_ISSET_ID);
    }

    public void setEdgeDeviceHashCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EDGEDEVICEHASHCODE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FINGERPRINTS:
        if (value == null) {
          unsetFingerprints();
        } else {
          setFingerprints((java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer>)value);
        }
        break;

      case EDGE_DEVICE_HASH_CODE:
        if (value == null) {
          unsetEdgeDeviceHashCode();
        } else {
          setEdgeDeviceHashCode((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FINGERPRINTS:
        return getFingerprints();

      case EDGE_DEVICE_HASH_CODE:
        return getEdgeDeviceHashCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FINGERPRINTS:
        return isSetFingerprints();
      case EDGE_DEVICE_HASH_CODE:
        return isSetEdgeDeviceHashCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof receiveAndProcessFP_args)
        return this.equals((receiveAndProcessFP_args)that);
      return false;
    }

    public boolean equals(receiveAndProcessFP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fingerprints = true && this.isSetFingerprints();
      boolean that_present_fingerprints = true && that.isSetFingerprints();
      if (this_present_fingerprints || that_present_fingerprints) {
        if (!(this_present_fingerprints && that_present_fingerprints))
          return false;
        if (!this.fingerprints.equals(that.fingerprints))
          return false;
      }

      boolean this_present_edgeDeviceHashCode = true;
      boolean that_present_edgeDeviceHashCode = true;
      if (this_present_edgeDeviceHashCode || that_present_edgeDeviceHashCode) {
        if (!(this_present_edgeDeviceHashCode && that_present_edgeDeviceHashCode))
          return false;
        if (this.edgeDeviceHashCode != that.edgeDeviceHashCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFingerprints()) ? 131071 : 524287);
      if (isSetFingerprints())
        hashCode = hashCode * 8191 + fingerprints.hashCode();

      hashCode = hashCode * 8191 + edgeDeviceHashCode;

      return hashCode;
    }

    @Override
    public int compareTo(receiveAndProcessFP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetFingerprints(), other.isSetFingerprints());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFingerprints()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fingerprints, other.fingerprints);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEdgeDeviceHashCode(), other.isSetEdgeDeviceHashCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeDeviceHashCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeDeviceHashCode, other.edgeDeviceHashCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("receiveAndProcessFP_args(");
      boolean first = true;

      sb.append("fingerprints:");
      if (this.fingerprints == null) {
        sb.append("null");
      } else {
        sb.append(this.fingerprints);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeDeviceHashCode:");
      sb.append(this.edgeDeviceHashCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveAndProcessFP_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_argsStandardScheme getScheme() {
        return new receiveAndProcessFP_argsStandardScheme();
      }
    }

    private static class receiveAndProcessFP_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<receiveAndProcessFP_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FINGERPRINTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                  struct.fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(2*_map34.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key35;
                  int _val36;
                  for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                  {
                    {
                      org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                      _key35 = new java.util.ArrayList<java.lang.Double>(_list38.size);
                      double _elem39;
                      for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                      {
                        _elem39 = iprot.readDouble();
                        _key35.add(_elem39);
                      }
                      iprot.readListEnd();
                    }
                    _val36 = iprot.readI32();
                    struct.fingerprints.put(_key35, _val36);
                  }
                  iprot.readMapEnd();
                }
                struct.setFingerprintsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDGE_DEVICE_HASH_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.edgeDeviceHashCode = iprot.readI32();
                struct.setEdgeDeviceHashCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fingerprints != null) {
          oprot.writeFieldBegin(FINGERPRINTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I32, struct.fingerprints.size()));
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> _iter41 : struct.fingerprints.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter41.getKey().size()));
                for (double _iter42 : _iter41.getKey())
                {
                  oprot.writeDouble(_iter42);
                }
                oprot.writeListEnd();
              }
              oprot.writeI32(_iter41.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EDGE_DEVICE_HASH_CODE_FIELD_DESC);
        oprot.writeI32(struct.edgeDeviceHashCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveAndProcessFP_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_argsTupleScheme getScheme() {
        return new receiveAndProcessFP_argsTupleScheme();
      }
    }

    private static class receiveAndProcessFP_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<receiveAndProcessFP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFingerprints()) {
          optionals.set(0);
        }
        if (struct.isSetEdgeDeviceHashCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFingerprints()) {
          {
            oprot.writeI32(struct.fingerprints.size());
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> _iter43 : struct.fingerprints.entrySet())
            {
              {
                oprot.writeI32(_iter43.getKey().size());
                for (double _iter44 : _iter43.getKey())
                {
                  oprot.writeDouble(_iter44);
                }
              }
              oprot.writeI32(_iter43.getValue());
            }
          }
        }
        if (struct.isSetEdgeDeviceHashCode()) {
          oprot.writeI32(struct.edgeDeviceHashCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map45 = iprot.readMapBegin();
            struct.fingerprints = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(2*_map45.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key46;
            int _val47;
            for (int _i48 = 0; _i48 < _map45.size; ++_i48)
            {
              {
                org.apache.thrift.protocol.TList _list49 = iprot.readListBegin();
                _key46 = new java.util.ArrayList<java.lang.Double>(_list49.size);
                double _elem50;
                for (int _i51 = 0; _i51 < _list49.size; ++_i51)
                {
                  _elem50 = iprot.readDouble();
                  _key46.add(_elem50);
                }
              }
              _val47 = iprot.readI32();
              struct.fingerprints.put(_key46, _val47);
            }
          }
          struct.setFingerprintsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.edgeDeviceHashCode = iprot.readI32();
          struct.setEdgeDeviceHashCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class receiveAndProcessFP_result implements org.apache.thrift.TBase<receiveAndProcessFP_result, receiveAndProcessFP_result._Fields>, java.io.Serializable, Cloneable, Comparable<receiveAndProcessFP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("receiveAndProcessFP_result");

    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new receiveAndProcessFP_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new receiveAndProcessFP_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVALID((short)1, "invalid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(receiveAndProcessFP_result.class, metaDataMap);
    }

    public receiveAndProcessFP_result() {
    }

    public receiveAndProcessFP_result(
      InvalidException invalid)
    {
      this();
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public receiveAndProcessFP_result(receiveAndProcessFP_result other) {
      if (other.isSetInvalid()) {
        this.invalid = new InvalidException(other.invalid);
      }
    }

    @Override
    public receiveAndProcessFP_result deepCopy() {
      return new receiveAndProcessFP_result(this);
    }

    @Override
    public void clear() {
      this.invalid = null;
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidException getInvalid() {
      return this.invalid;
    }

    public receiveAndProcessFP_result setInvalid(@org.apache.thrift.annotation.Nullable InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INVALID:
        return getInvalid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INVALID:
        return isSetInvalid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof receiveAndProcessFP_result)
        return this.equals((receiveAndProcessFP_result)that);
      return false;
    }

    public boolean equals(receiveAndProcessFP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(receiveAndProcessFP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("receiveAndProcessFP_result(");
      boolean first = true;

      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class receiveAndProcessFP_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_resultStandardScheme getScheme() {
        return new receiveAndProcessFP_resultStandardScheme();
      }
    }

    private static class receiveAndProcessFP_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<receiveAndProcessFP_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class receiveAndProcessFP_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public receiveAndProcessFP_resultTupleScheme getScheme() {
        return new receiveAndProcessFP_resultTupleScheme();
      }
    }

    private static class receiveAndProcessFP_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<receiveAndProcessFP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInvalid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, receiveAndProcessFP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invalid = new InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class processResult_args implements org.apache.thrift.TBase<processResult_args, processResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<processResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processResult_args");

    private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitID", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField UNIT_IN_NODE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("unitInNodeList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new processResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new processResult_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> unitID; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<UnitInNode> unitInNodeList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNIT_ID((short)1, "unitID"),
      UNIT_IN_NODE_LIST((short)2, "unitInNodeList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNIT_ID
            return UNIT_ID;
          case 2: // UNIT_IN_NODE_LIST
            return UNIT_IN_NODE_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      tmpMap.put(_Fields.UNIT_IN_NODE_LIST, new org.apache.thrift.meta_data.FieldMetaData("unitInNodeList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UnitInNode.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processResult_args.class, metaDataMap);
    }

    public processResult_args() {
    }

    public processResult_args(
      java.util.List<java.lang.Double> unitID,
      java.util.List<UnitInNode> unitInNodeList)
    {
      this();
      this.unitID = unitID;
      this.unitInNodeList = unitInNodeList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processResult_args(processResult_args other) {
      if (other.isSetUnitID()) {
        java.util.List<java.lang.Double> __this__unitID = new java.util.ArrayList<java.lang.Double>(other.unitID);
        this.unitID = __this__unitID;
      }
      if (other.isSetUnitInNodeList()) {
        java.util.List<UnitInNode> __this__unitInNodeList = new java.util.ArrayList<UnitInNode>(other.unitInNodeList.size());
        for (UnitInNode other_element : other.unitInNodeList) {
          __this__unitInNodeList.add(new UnitInNode(other_element));
        }
        this.unitInNodeList = __this__unitInNodeList;
      }
    }

    @Override
    public processResult_args deepCopy() {
      return new processResult_args(this);
    }

    @Override
    public void clear() {
      this.unitID = null;
      this.unitInNodeList = null;
    }

    public int getUnitIDSize() {
      return (this.unitID == null) ? 0 : this.unitID.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.Double> getUnitIDIterator() {
      return (this.unitID == null) ? null : this.unitID.iterator();
    }

    public void addToUnitID(double elem) {
      if (this.unitID == null) {
        this.unitID = new java.util.ArrayList<java.lang.Double>();
      }
      this.unitID.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.Double> getUnitID() {
      return this.unitID;
    }

    public processResult_args setUnitID(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> unitID) {
      this.unitID = unitID;
      return this;
    }

    public void unsetUnitID() {
      this.unitID = null;
    }

    /** Returns true if field unitID is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitID() {
      return this.unitID != null;
    }

    public void setUnitIDIsSet(boolean value) {
      if (!value) {
        this.unitID = null;
      }
    }

    public int getUnitInNodeListSize() {
      return (this.unitInNodeList == null) ? 0 : this.unitInNodeList.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<UnitInNode> getUnitInNodeListIterator() {
      return (this.unitInNodeList == null) ? null : this.unitInNodeList.iterator();
    }

    public void addToUnitInNodeList(UnitInNode elem) {
      if (this.unitInNodeList == null) {
        this.unitInNodeList = new java.util.ArrayList<UnitInNode>();
      }
      this.unitInNodeList.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<UnitInNode> getUnitInNodeList() {
      return this.unitInNodeList;
    }

    public processResult_args setUnitInNodeList(@org.apache.thrift.annotation.Nullable java.util.List<UnitInNode> unitInNodeList) {
      this.unitInNodeList = unitInNodeList;
      return this;
    }

    public void unsetUnitInNodeList() {
      this.unitInNodeList = null;
    }

    /** Returns true if field unitInNodeList is set (has been assigned a value) and false otherwise */
    public boolean isSetUnitInNodeList() {
      return this.unitInNodeList != null;
    }

    public void setUnitInNodeListIsSet(boolean value) {
      if (!value) {
        this.unitInNodeList = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UNIT_ID:
        if (value == null) {
          unsetUnitID();
        } else {
          setUnitID((java.util.List<java.lang.Double>)value);
        }
        break;

      case UNIT_IN_NODE_LIST:
        if (value == null) {
          unsetUnitInNodeList();
        } else {
          setUnitInNodeList((java.util.List<UnitInNode>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UNIT_ID:
        return getUnitID();

      case UNIT_IN_NODE_LIST:
        return getUnitInNodeList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UNIT_ID:
        return isSetUnitID();
      case UNIT_IN_NODE_LIST:
        return isSetUnitInNodeList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof processResult_args)
        return this.equals((processResult_args)that);
      return false;
    }

    public boolean equals(processResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unitID = true && this.isSetUnitID();
      boolean that_present_unitID = true && that.isSetUnitID();
      if (this_present_unitID || that_present_unitID) {
        if (!(this_present_unitID && that_present_unitID))
          return false;
        if (!this.unitID.equals(that.unitID))
          return false;
      }

      boolean this_present_unitInNodeList = true && this.isSetUnitInNodeList();
      boolean that_present_unitInNodeList = true && that.isSetUnitInNodeList();
      if (this_present_unitInNodeList || that_present_unitInNodeList) {
        if (!(this_present_unitInNodeList && that_present_unitInNodeList))
          return false;
        if (!this.unitInNodeList.equals(that.unitInNodeList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnitID()) ? 131071 : 524287);
      if (isSetUnitID())
        hashCode = hashCode * 8191 + unitID.hashCode();

      hashCode = hashCode * 8191 + ((isSetUnitInNodeList()) ? 131071 : 524287);
      if (isSetUnitInNodeList())
        hashCode = hashCode * 8191 + unitInNodeList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(processResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUnitID(), other.isSetUnitID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitID, other.unitID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUnitInNodeList(), other.isSetUnitInNodeList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnitInNodeList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitInNodeList, other.unitInNodeList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("processResult_args(");
      boolean first = true;

      sb.append("unitID:");
      if (this.unitID == null) {
        sb.append("null");
      } else {
        sb.append(this.unitID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unitInNodeList:");
      if (this.unitInNodeList == null) {
        sb.append("null");
      } else {
        sb.append(this.unitInNodeList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public processResult_argsStandardScheme getScheme() {
        return new processResult_argsStandardScheme();
      }
    }

    private static class processResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<processResult_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, processResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNIT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list52 = iprot.readListBegin();
                  struct.unitID = new java.util.ArrayList<java.lang.Double>(_list52.size);
                  double _elem53;
                  for (int _i54 = 0; _i54 < _list52.size; ++_i54)
                  {
                    _elem53 = iprot.readDouble();
                    struct.unitID.add(_elem53);
                  }
                  iprot.readListEnd();
                }
                struct.setUnitIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UNIT_IN_NODE_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list55 = iprot.readListBegin();
                  struct.unitInNodeList = new java.util.ArrayList<UnitInNode>(_list55.size);
                  @org.apache.thrift.annotation.Nullable UnitInNode _elem56;
                  for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                  {
                    _elem56 = new UnitInNode();
                    _elem56.read(iprot);
                    struct.unitInNodeList.add(_elem56);
                  }
                  iprot.readListEnd();
                }
                struct.setUnitInNodeListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, processResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unitID != null) {
          oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.unitID.size()));
            for (double _iter58 : struct.unitID)
            {
              oprot.writeDouble(_iter58);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.unitInNodeList != null) {
          oprot.writeFieldBegin(UNIT_IN_NODE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.unitInNodeList.size()));
            for (UnitInNode _iter59 : struct.unitInNodeList)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public processResult_argsTupleScheme getScheme() {
        return new processResult_argsTupleScheme();
      }
    }

    private static class processResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<processResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnitID()) {
          optionals.set(0);
        }
        if (struct.isSetUnitInNodeList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUnitID()) {
          {
            oprot.writeI32(struct.unitID.size());
            for (double _iter60 : struct.unitID)
            {
              oprot.writeDouble(_iter60);
            }
          }
        }
        if (struct.isSetUnitInNodeList()) {
          {
            oprot.writeI32(struct.unitInNodeList.size());
            for (UnitInNode _iter61 : struct.unitInNodeList)
            {
              _iter61.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
            struct.unitID = new java.util.ArrayList<java.lang.Double>(_list62.size);
            double _elem63;
            for (int _i64 = 0; _i64 < _list62.size; ++_i64)
            {
              _elem63 = iprot.readDouble();
              struct.unitID.add(_elem63);
            }
          }
          struct.setUnitIDIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list65 = iprot.readListBegin();
            struct.unitInNodeList = new java.util.ArrayList<UnitInNode>(_list65.size);
            @org.apache.thrift.annotation.Nullable UnitInNode _elem66;
            for (int _i67 = 0; _i67 < _list65.size; ++_i67)
            {
              _elem66 = new UnitInNode();
              _elem66.read(iprot);
              struct.unitInNodeList.add(_elem66);
            }
          }
          struct.setUnitInNodeListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class processResult_result implements org.apache.thrift.TBase<processResult_result, processResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<processResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processResult_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new processResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new processResult_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processResult_result.class, metaDataMap);
    }

    public processResult_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processResult_result(processResult_result other) {
    }

    @Override
    public processResult_result deepCopy() {
      return new processResult_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof processResult_result)
        return this.equals((processResult_result)that);
      return false;
    }

    public boolean equals(processResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(processResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("processResult_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public processResult_resultStandardScheme getScheme() {
        return new processResult_resultStandardScheme();
      }
    }

    private static class processResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<processResult_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, processResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, processResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public processResult_resultTupleScheme getScheme() {
        return new processResult_resultTupleScheme();
      }
    }

    private static class processResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<processResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class provideNeighborsResult_args implements org.apache.thrift.TBase<provideNeighborsResult_args, provideNeighborsResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<provideNeighborsResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("provideNeighborsResult_args");

    private static final org.apache.thrift.protocol.TField UN_SATE_UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("unSateUnits", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField EDGE_NODE_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("edgeNodeHash", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new provideNeighborsResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new provideNeighborsResult_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> unSateUnits; // required
    public int edgeNodeHash; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UN_SATE_UNITS((short)1, "unSateUnits"),
      EDGE_NODE_HASH((short)2, "edgeNodeHash");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UN_SATE_UNITS
            return UN_SATE_UNITS;
          case 2: // EDGE_NODE_HASH
            return EDGE_NODE_HASH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EDGENODEHASH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UN_SATE_UNITS, new org.apache.thrift.meta_data.FieldMetaData("unSateUnits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.EDGE_NODE_HASH, new org.apache.thrift.meta_data.FieldMetaData("edgeNodeHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(provideNeighborsResult_args.class, metaDataMap);
    }

    public provideNeighborsResult_args() {
    }

    public provideNeighborsResult_args(
      java.util.List<java.util.List<java.lang.Double>> unSateUnits,
      int edgeNodeHash)
    {
      this();
      this.unSateUnits = unSateUnits;
      this.edgeNodeHash = edgeNodeHash;
      setEdgeNodeHashIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public provideNeighborsResult_args(provideNeighborsResult_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUnSateUnits()) {
        java.util.List<java.util.List<java.lang.Double>> __this__unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.unSateUnits.size());
        for (java.util.List<java.lang.Double> other_element : other.unSateUnits) {
          java.util.List<java.lang.Double> __this__unSateUnits_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__unSateUnits.add(__this__unSateUnits_copy);
        }
        this.unSateUnits = __this__unSateUnits;
      }
      this.edgeNodeHash = other.edgeNodeHash;
    }

    @Override
    public provideNeighborsResult_args deepCopy() {
      return new provideNeighborsResult_args(this);
    }

    @Override
    public void clear() {
      this.unSateUnits = null;
      setEdgeNodeHashIsSet(false);
      this.edgeNodeHash = 0;
    }

    public int getUnSateUnitsSize() {
      return (this.unSateUnits == null) ? 0 : this.unSateUnits.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getUnSateUnitsIterator() {
      return (this.unSateUnits == null) ? null : this.unSateUnits.iterator();
    }

    public void addToUnSateUnits(java.util.List<java.lang.Double> elem) {
      if (this.unSateUnits == null) {
        this.unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>();
      }
      this.unSateUnits.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.util.List<java.lang.Double>> getUnSateUnits() {
      return this.unSateUnits;
    }

    public provideNeighborsResult_args setUnSateUnits(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> unSateUnits) {
      this.unSateUnits = unSateUnits;
      return this;
    }

    public void unsetUnSateUnits() {
      this.unSateUnits = null;
    }

    /** Returns true if field unSateUnits is set (has been assigned a value) and false otherwise */
    public boolean isSetUnSateUnits() {
      return this.unSateUnits != null;
    }

    public void setUnSateUnitsIsSet(boolean value) {
      if (!value) {
        this.unSateUnits = null;
      }
    }

    public int getEdgeNodeHash() {
      return this.edgeNodeHash;
    }

    public provideNeighborsResult_args setEdgeNodeHash(int edgeNodeHash) {
      this.edgeNodeHash = edgeNodeHash;
      setEdgeNodeHashIsSet(true);
      return this;
    }

    public void unsetEdgeNodeHash() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EDGENODEHASH_ISSET_ID);
    }

    /** Returns true if field edgeNodeHash is set (has been assigned a value) and false otherwise */
    public boolean isSetEdgeNodeHash() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EDGENODEHASH_ISSET_ID);
    }

    public void setEdgeNodeHashIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EDGENODEHASH_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case UN_SATE_UNITS:
        if (value == null) {
          unsetUnSateUnits();
        } else {
          setUnSateUnits((java.util.List<java.util.List<java.lang.Double>>)value);
        }
        break;

      case EDGE_NODE_HASH:
        if (value == null) {
          unsetEdgeNodeHash();
        } else {
          setEdgeNodeHash((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UN_SATE_UNITS:
        return getUnSateUnits();

      case EDGE_NODE_HASH:
        return getEdgeNodeHash();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UN_SATE_UNITS:
        return isSetUnSateUnits();
      case EDGE_NODE_HASH:
        return isSetEdgeNodeHash();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof provideNeighborsResult_args)
        return this.equals((provideNeighborsResult_args)that);
      return false;
    }

    public boolean equals(provideNeighborsResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_unSateUnits = true && this.isSetUnSateUnits();
      boolean that_present_unSateUnits = true && that.isSetUnSateUnits();
      if (this_present_unSateUnits || that_present_unSateUnits) {
        if (!(this_present_unSateUnits && that_present_unSateUnits))
          return false;
        if (!this.unSateUnits.equals(that.unSateUnits))
          return false;
      }

      boolean this_present_edgeNodeHash = true;
      boolean that_present_edgeNodeHash = true;
      if (this_present_edgeNodeHash || that_present_edgeNodeHash) {
        if (!(this_present_edgeNodeHash && that_present_edgeNodeHash))
          return false;
        if (this.edgeNodeHash != that.edgeNodeHash)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUnSateUnits()) ? 131071 : 524287);
      if (isSetUnSateUnits())
        hashCode = hashCode * 8191 + unSateUnits.hashCode();

      hashCode = hashCode * 8191 + edgeNodeHash;

      return hashCode;
    }

    @Override
    public int compareTo(provideNeighborsResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetUnSateUnits(), other.isSetUnSateUnits());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnSateUnits()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unSateUnits, other.unSateUnits);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEdgeNodeHash(), other.isSetEdgeNodeHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEdgeNodeHash()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edgeNodeHash, other.edgeNodeHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("provideNeighborsResult_args(");
      boolean first = true;

      sb.append("unSateUnits:");
      if (this.unSateUnits == null) {
        sb.append("null");
      } else {
        sb.append(this.unSateUnits);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("edgeNodeHash:");
      sb.append(this.edgeNodeHash);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class provideNeighborsResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_argsStandardScheme getScheme() {
        return new provideNeighborsResult_argsStandardScheme();
      }
    }

    private static class provideNeighborsResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<provideNeighborsResult_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UN_SATE_UNITS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list68 = iprot.readListBegin();
                  struct.unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list68.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem69;
                  for (int _i70 = 0; _i70 < _list68.size; ++_i70)
                  {
                    {
                      org.apache.thrift.protocol.TList _list71 = iprot.readListBegin();
                      _elem69 = new java.util.ArrayList<java.lang.Double>(_list71.size);
                      double _elem72;
                      for (int _i73 = 0; _i73 < _list71.size; ++_i73)
                      {
                        _elem72 = iprot.readDouble();
                        _elem69.add(_elem72);
                      }
                      iprot.readListEnd();
                    }
                    struct.unSateUnits.add(_elem69);
                  }
                  iprot.readListEnd();
                }
                struct.setUnSateUnitsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EDGE_NODE_HASH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.edgeNodeHash = iprot.readI32();
                struct.setEdgeNodeHashIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unSateUnits != null) {
          oprot.writeFieldBegin(UN_SATE_UNITS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.unSateUnits.size()));
            for (java.util.List<java.lang.Double> _iter74 : struct.unSateUnits)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter74.size()));
                for (double _iter75 : _iter74)
                {
                  oprot.writeDouble(_iter75);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EDGE_NODE_HASH_FIELD_DESC);
        oprot.writeI32(struct.edgeNodeHash);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class provideNeighborsResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_argsTupleScheme getScheme() {
        return new provideNeighborsResult_argsTupleScheme();
      }
    }

    private static class provideNeighborsResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<provideNeighborsResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUnSateUnits()) {
          optionals.set(0);
        }
        if (struct.isSetEdgeNodeHash()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUnSateUnits()) {
          {
            oprot.writeI32(struct.unSateUnits.size());
            for (java.util.List<java.lang.Double> _iter76 : struct.unSateUnits)
            {
              {
                oprot.writeI32(_iter76.size());
                for (double _iter77 : _iter76)
                {
                  oprot.writeDouble(_iter77);
                }
              }
            }
          }
        }
        if (struct.isSetEdgeNodeHash()) {
          oprot.writeI32(struct.edgeNodeHash);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
            struct.unSateUnits = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list78.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem79;
            for (int _i80 = 0; _i80 < _list78.size; ++_i80)
            {
              {
                org.apache.thrift.protocol.TList _list81 = iprot.readListBegin();
                _elem79 = new java.util.ArrayList<java.lang.Double>(_list81.size);
                double _elem82;
                for (int _i83 = 0; _i83 < _list81.size; ++_i83)
                {
                  _elem82 = iprot.readDouble();
                  _elem79.add(_elem82);
                }
              }
              struct.unSateUnits.add(_elem79);
            }
          }
          struct.setUnSateUnitsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.edgeNodeHash = iprot.readI32();
          struct.setEdgeNodeHashIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class provideNeighborsResult_result implements org.apache.thrift.TBase<provideNeighborsResult_result, provideNeighborsResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<provideNeighborsResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("provideNeighborsResult_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new provideNeighborsResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new provideNeighborsResult_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(provideNeighborsResult_result.class, metaDataMap);
    }

    public provideNeighborsResult_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public provideNeighborsResult_result(provideNeighborsResult_result other) {
    }

    @Override
    public provideNeighborsResult_result deepCopy() {
      return new provideNeighborsResult_result(this);
    }

    @Override
    public void clear() {
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof provideNeighborsResult_result)
        return this.equals((provideNeighborsResult_result)that);
      return false;
    }

    public boolean equals(provideNeighborsResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(provideNeighborsResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("provideNeighborsResult_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class provideNeighborsResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_resultStandardScheme getScheme() {
        return new provideNeighborsResult_resultStandardScheme();
      }
    }

    private static class provideNeighborsResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<provideNeighborsResult_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class provideNeighborsResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public provideNeighborsResult_resultTupleScheme getScheme() {
        return new provideNeighborsResult_resultTupleScheme();
      }
    }

    private static class provideNeighborsResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<provideNeighborsResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, provideNeighborsResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendData_args implements org.apache.thrift.TBase<sendData_args, sendData_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendData_args");

    private static final org.apache.thrift.protocol.TField BUCKET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bucketIds", org.apache.thrift.protocol.TType.SET, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_HASH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceHashCode", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.Double>> bucketIds; // required
    public int deviceHashCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BUCKET_IDS((short)1, "bucketIds"),
      DEVICE_HASH_CODE((short)2, "deviceHashCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BUCKET_IDS
            return BUCKET_IDS;
          case 2: // DEVICE_HASH_CODE
            return DEVICE_HASH_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DEVICEHASHCODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BUCKET_IDS, new org.apache.thrift.meta_data.FieldMetaData("bucketIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      tmpMap.put(_Fields.DEVICE_HASH_CODE, new org.apache.thrift.meta_data.FieldMetaData("deviceHashCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendData_args.class, metaDataMap);
    }

    public sendData_args() {
    }

    public sendData_args(
      java.util.Set<java.util.List<java.lang.Double>> bucketIds,
      int deviceHashCode)
    {
      this();
      this.bucketIds = bucketIds;
      this.deviceHashCode = deviceHashCode;
      setDeviceHashCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendData_args(sendData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetBucketIds()) {
        java.util.Set<java.util.List<java.lang.Double>> __this__bucketIds = new java.util.HashSet<java.util.List<java.lang.Double>>(other.bucketIds.size());
        for (java.util.List<java.lang.Double> other_element : other.bucketIds) {
          java.util.List<java.lang.Double> __this__bucketIds_copy = new java.util.ArrayList<java.lang.Double>(other_element);
          __this__bucketIds.add(__this__bucketIds_copy);
        }
        this.bucketIds = __this__bucketIds;
      }
      this.deviceHashCode = other.deviceHashCode;
    }

    @Override
    public sendData_args deepCopy() {
      return new sendData_args(this);
    }

    @Override
    public void clear() {
      this.bucketIds = null;
      setDeviceHashCodeIsSet(false);
      this.deviceHashCode = 0;
    }

    public int getBucketIdsSize() {
      return (this.bucketIds == null) ? 0 : this.bucketIds.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.util.List<java.lang.Double>> getBucketIdsIterator() {
      return (this.bucketIds == null) ? null : this.bucketIds.iterator();
    }

    public void addToBucketIds(java.util.List<java.lang.Double> elem) {
      if (this.bucketIds == null) {
        this.bucketIds = new java.util.HashSet<java.util.List<java.lang.Double>>();
      }
      this.bucketIds.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Set<java.util.List<java.lang.Double>> getBucketIds() {
      return this.bucketIds;
    }

    public sendData_args setBucketIds(@org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.Double>> bucketIds) {
      this.bucketIds = bucketIds;
      return this;
    }

    public void unsetBucketIds() {
      this.bucketIds = null;
    }

    /** Returns true if field bucketIds is set (has been assigned a value) and false otherwise */
    public boolean isSetBucketIds() {
      return this.bucketIds != null;
    }

    public void setBucketIdsIsSet(boolean value) {
      if (!value) {
        this.bucketIds = null;
      }
    }

    public int getDeviceHashCode() {
      return this.deviceHashCode;
    }

    public sendData_args setDeviceHashCode(int deviceHashCode) {
      this.deviceHashCode = deviceHashCode;
      setDeviceHashCodeIsSet(true);
      return this;
    }

    public void unsetDeviceHashCode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DEVICEHASHCODE_ISSET_ID);
    }

    /** Returns true if field deviceHashCode is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceHashCode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DEVICEHASHCODE_ISSET_ID);
    }

    public void setDeviceHashCodeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DEVICEHASHCODE_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BUCKET_IDS:
        if (value == null) {
          unsetBucketIds();
        } else {
          setBucketIds((java.util.Set<java.util.List<java.lang.Double>>)value);
        }
        break;

      case DEVICE_HASH_CODE:
        if (value == null) {
          unsetDeviceHashCode();
        } else {
          setDeviceHashCode((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BUCKET_IDS:
        return getBucketIds();

      case DEVICE_HASH_CODE:
        return getDeviceHashCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BUCKET_IDS:
        return isSetBucketIds();
      case DEVICE_HASH_CODE:
        return isSetDeviceHashCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendData_args)
        return this.equals((sendData_args)that);
      return false;
    }

    public boolean equals(sendData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_bucketIds = true && this.isSetBucketIds();
      boolean that_present_bucketIds = true && that.isSetBucketIds();
      if (this_present_bucketIds || that_present_bucketIds) {
        if (!(this_present_bucketIds && that_present_bucketIds))
          return false;
        if (!this.bucketIds.equals(that.bucketIds))
          return false;
      }

      boolean this_present_deviceHashCode = true;
      boolean that_present_deviceHashCode = true;
      if (this_present_deviceHashCode || that_present_deviceHashCode) {
        if (!(this_present_deviceHashCode && that_present_deviceHashCode))
          return false;
        if (this.deviceHashCode != that.deviceHashCode)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBucketIds()) ? 131071 : 524287);
      if (isSetBucketIds())
        hashCode = hashCode * 8191 + bucketIds.hashCode();

      hashCode = hashCode * 8191 + deviceHashCode;

      return hashCode;
    }

    @Override
    public int compareTo(sendData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBucketIds(), other.isSetBucketIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBucketIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bucketIds, other.bucketIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDeviceHashCode(), other.isSetDeviceHashCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceHashCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceHashCode, other.deviceHashCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendData_args(");
      boolean first = true;

      sb.append("bucketIds:");
      if (this.bucketIds == null) {
        sb.append("null");
      } else {
        sb.append(this.bucketIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceHashCode:");
      sb.append(this.deviceHashCode);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_argsStandardScheme getScheme() {
        return new sendData_argsStandardScheme();
      }
    }

    private static class sendData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BUCKET_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set84 = iprot.readSetBegin();
                  struct.bucketIds = new java.util.HashSet<java.util.List<java.lang.Double>>(2*_set84.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem85;
                  for (int _i86 = 0; _i86 < _set84.size; ++_i86)
                  {
                    {
                      org.apache.thrift.protocol.TList _list87 = iprot.readListBegin();
                      _elem85 = new java.util.ArrayList<java.lang.Double>(_list87.size);
                      double _elem88;
                      for (int _i89 = 0; _i89 < _list87.size; ++_i89)
                      {
                        _elem88 = iprot.readDouble();
                        _elem85.add(_elem88);
                      }
                      iprot.readListEnd();
                    }
                    struct.bucketIds.add(_elem85);
                  }
                  iprot.readSetEnd();
                }
                struct.setBucketIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_HASH_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.deviceHashCode = iprot.readI32();
                struct.setDeviceHashCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bucketIds != null) {
          oprot.writeFieldBegin(BUCKET_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, struct.bucketIds.size()));
            for (java.util.List<java.lang.Double> _iter90 : struct.bucketIds)
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter90.size()));
                for (double _iter91 : _iter90)
                {
                  oprot.writeDouble(_iter91);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DEVICE_HASH_CODE_FIELD_DESC);
        oprot.writeI32(struct.deviceHashCode);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_argsTupleScheme getScheme() {
        return new sendData_argsTupleScheme();
      }
    }

    private static class sendData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBucketIds()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceHashCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetBucketIds()) {
          {
            oprot.writeI32(struct.bucketIds.size());
            for (java.util.List<java.lang.Double> _iter92 : struct.bucketIds)
            {
              {
                oprot.writeI32(_iter92.size());
                for (double _iter93 : _iter92)
                {
                  oprot.writeDouble(_iter93);
                }
              }
            }
          }
        }
        if (struct.isSetDeviceHashCode()) {
          oprot.writeI32(struct.deviceHashCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TSet _set94 = iprot.readSetBegin();
            struct.bucketIds = new java.util.HashSet<java.util.List<java.lang.Double>>(2*_set94.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem95;
            for (int _i96 = 0; _i96 < _set94.size; ++_i96)
            {
              {
                org.apache.thrift.protocol.TList _list97 = iprot.readListBegin();
                _elem95 = new java.util.ArrayList<java.lang.Double>(_list97.size);
                double _elem98;
                for (int _i99 = 0; _i99 < _list97.size; ++_i99)
                {
                  _elem98 = iprot.readDouble();
                  _elem95.add(_elem98);
                }
              }
              struct.bucketIds.add(_elem95);
            }
          }
          struct.setBucketIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceHashCode = iprot.readI32();
          struct.setDeviceHashCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class sendData_result implements org.apache.thrift.TBase<sendData_result, sendData_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendData_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)), 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector.class)))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendData_result.class, metaDataMap);
    }

    public sendData_result() {
    }

    public sendData_result(
      java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendData_result(sendData_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> __this__success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<Vector>>(other.success.size());
        for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.util.List<Vector>> other_element : other.success.entrySet()) {

          java.util.List<java.lang.Double> other_element_key = other_element.getKey();
          java.util.List<Vector> other_element_value = other_element.getValue();

          java.util.List<java.lang.Double> __this__success_copy_key = new java.util.ArrayList<java.lang.Double>(other_element_key);

          java.util.List<Vector> __this__success_copy_value = new java.util.ArrayList<Vector>(other_element_value.size());
          for (Vector other_element_value_element : other_element_value) {
            __this__success_copy_value.add(new Vector(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    @Override
    public sendData_result deepCopy() {
      return new sendData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.util.List<java.lang.Double> key, java.util.List<Vector> val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<Vector>>();
      }
      this.success.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> getSuccess() {
      return this.success;
    }

    public sendData_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.util.List<java.lang.Double>,java.util.List<Vector>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof sendData_result)
        return this.equals((sendData_result)that);
      return false;
    }

    public boolean equals(sendData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_resultStandardScheme getScheme() {
        return new sendData_resultStandardScheme();
      }
    }

    private static class sendData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, sendData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map100 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<Vector>>(2*_map100.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key101;
                  @org.apache.thrift.annotation.Nullable java.util.List<Vector> _val102;
                  for (int _i103 = 0; _i103 < _map100.size; ++_i103)
                  {
                    {
                      org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                      _key101 = new java.util.ArrayList<java.lang.Double>(_list104.size);
                      double _elem105;
                      for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                      {
                        _elem105 = iprot.readDouble();
                        _key101.add(_elem105);
                      }
                      iprot.readListEnd();
                    }
                    {
                      org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                      _val102 = new java.util.ArrayList<Vector>(_list107.size);
                      @org.apache.thrift.annotation.Nullable Vector _elem108;
                      for (int _i109 = 0; _i109 < _list107.size; ++_i109)
                      {
                        _elem108 = new Vector();
                        _elem108.read(iprot);
                        _val102.add(_elem108);
                      }
                      iprot.readListEnd();
                    }
                    struct.success.put(_key101, _val102);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, sendData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.LIST, struct.success.size()));
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.util.List<Vector>> _iter110 : struct.success.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter110.getKey().size()));
                for (double _iter111 : _iter110.getKey())
                {
                  oprot.writeDouble(_iter111);
                }
                oprot.writeListEnd();
              }
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter110.getValue().size()));
                for (Vector _iter112 : _iter110.getValue())
                {
                  _iter112.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public sendData_resultTupleScheme getScheme() {
        return new sendData_resultTupleScheme();
      }
    }

    private static class sendData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.util.List<Vector>> _iter113 : struct.success.entrySet())
            {
              {
                oprot.writeI32(_iter113.getKey().size());
                for (double _iter114 : _iter113.getKey())
                {
                  oprot.writeDouble(_iter114);
                }
              }
              {
                oprot.writeI32(_iter113.getValue().size());
                for (Vector _iter115 : _iter113.getValue())
                {
                  _iter115.write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map116 = iprot.readMapBegin();
            struct.success = new java.util.HashMap<java.util.List<java.lang.Double>,java.util.List<Vector>>(2*_map116.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key117;
            @org.apache.thrift.annotation.Nullable java.util.List<Vector> _val118;
            for (int _i119 = 0; _i119 < _map116.size; ++_i119)
            {
              {
                org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                _key117 = new java.util.ArrayList<java.lang.Double>(_list120.size);
                double _elem121;
                for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                {
                  _elem121 = iprot.readDouble();
                  _key117.add(_elem121);
                }
              }
              {
                org.apache.thrift.protocol.TList _list123 = iprot.readListBegin();
                _val118 = new java.util.ArrayList<Vector>(_list123.size);
                @org.apache.thrift.annotation.Nullable Vector _elem124;
                for (int _i125 = 0; _i125 < _list123.size; ++_i125)
                {
                  _elem124 = new Vector();
                  _elem124.read(iprot);
                  _val118.add(_elem124);
                }
              }
              struct.success.put(_key117, _val118);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getExternalData_args implements org.apache.thrift.TBase<getExternalData_args, getExternalData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getExternalData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExternalData_args");

    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.MAP, (short)1);
    private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExternalData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExternalData_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status; // required
    public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      STATUS((short)1, "status"),
      RESULT((short)2, "result");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // STATUS
            return STATUS;
          case 2: // RESULT
            return RESULT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                  new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExternalData_args.class, metaDataMap);
    }

    public getExternalData_args() {
    }

    public getExternalData_args(
      java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status,
      java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result)
    {
      this();
      this.status = status;
      this.result = result;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExternalData_args(getExternalData_args other) {
      if (other.isSetStatus()) {
        java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> __this__status = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(other.status.size());
        for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> other_element : other.status.entrySet()) {

          java.util.List<java.lang.Double> other_element_key = other_element.getKey();
          java.lang.Integer other_element_value = other_element.getValue();

          java.util.List<java.lang.Double> __this__status_copy_key = new java.util.ArrayList<java.lang.Double>(other_element_key);

          java.lang.Integer __this__status_copy_value = other_element_value;

          __this__status.put(__this__status_copy_key, __this__status_copy_value);
        }
        this.status = __this__status;
      }
      if (other.isSetResult()) {
        java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> __this__result = new java.util.HashMap<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>>(other.result.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.util.List<java.lang.Double>>> other_element : other.result.entrySet()) {

          java.lang.Integer other_element_key = other_element.getKey();
          java.util.Set<java.util.List<java.lang.Double>> other_element_value = other_element.getValue();

          java.lang.Integer __this__result_copy_key = other_element_key;

          java.util.Set<java.util.List<java.lang.Double>> __this__result_copy_value = new java.util.HashSet<java.util.List<java.lang.Double>>(other_element_value.size());
          for (java.util.List<java.lang.Double> other_element_value_element : other_element_value) {
            java.util.List<java.lang.Double> __this__result_copy_value_copy = new java.util.ArrayList<java.lang.Double>(other_element_value_element);
            __this__result_copy_value.add(__this__result_copy_value_copy);
          }

          __this__result.put(__this__result_copy_key, __this__result_copy_value);
        }
        this.result = __this__result;
      }
    }

    @Override
    public getExternalData_args deepCopy() {
      return new getExternalData_args(this);
    }

    @Override
    public void clear() {
      this.status = null;
      this.result = null;
    }

    public int getStatusSize() {
      return (this.status == null) ? 0 : this.status.size();
    }

    public void putToStatus(java.util.List<java.lang.Double> key, int val) {
      if (this.status == null) {
        this.status = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>();
      }
      this.status.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> getStatus() {
      return this.status;
    }

    public getExternalData_args setStatus(@org.apache.thrift.annotation.Nullable java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer> status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public int getResultSize() {
      return (this.result == null) ? 0 : this.result.size();
    }

    public void putToResult(int key, java.util.Set<java.util.List<java.lang.Double>> val) {
      if (this.result == null) {
        this.result = new java.util.HashMap<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>>();
      }
      this.result.put(key, val);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> getResult() {
      return this.result;
    }

    public getExternalData_args setResult(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>> result) {
      this.result = result;
      return this;
    }

    public void unsetResult() {
      this.result = null;
    }

    /** Returns true if field result is set (has been assigned a value) and false otherwise */
    public boolean isSetResult() {
      return this.result != null;
    }

    public void setResultIsSet(boolean value) {
      if (!value) {
        this.result = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((java.util.Map<java.util.List<java.lang.Double>,java.lang.Integer>)value);
        }
        break;

      case RESULT:
        if (value == null) {
          unsetResult();
        } else {
          setResult((java.util.Map<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case STATUS:
        return getStatus();

      case RESULT:
        return getResult();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case STATUS:
        return isSetStatus();
      case RESULT:
        return isSetResult();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExternalData_args)
        return this.equals((getExternalData_args)that);
      return false;
    }

    public boolean equals(getExternalData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      boolean this_present_result = true && this.isSetResult();
      boolean that_present_result = true && that.isSetResult();
      if (this_present_result || that_present_result) {
        if (!(this_present_result && that_present_result))
          return false;
        if (!this.result.equals(that.result))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
      if (isSetStatus())
        hashCode = hashCode * 8191 + status.hashCode();

      hashCode = hashCode * 8191 + ((isSetResult()) ? 131071 : 524287);
      if (isSetResult())
        hashCode = hashCode * 8191 + result.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExternalData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetResult(), other.isSetResult());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResult()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExternalData_args(");
      boolean first = true;

      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("result:");
      if (this.result == null) {
        sb.append("null");
      } else {
        sb.append(this.result);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExternalData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_argsStandardScheme getScheme() {
        return new getExternalData_argsStandardScheme();
      }
    }

    private static class getExternalData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExternalData_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getExternalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map126 = iprot.readMapBegin();
                  struct.status = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(2*_map126.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key127;
                  int _val128;
                  for (int _i129 = 0; _i129 < _map126.size; ++_i129)
                  {
                    {
                      org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                      _key127 = new java.util.ArrayList<java.lang.Double>(_list130.size);
                      double _elem131;
                      for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                      {
                        _elem131 = iprot.readDouble();
                        _key127.add(_elem131);
                      }
                      iprot.readListEnd();
                    }
                    _val128 = iprot.readI32();
                    struct.status.put(_key127, _val128);
                  }
                  iprot.readMapEnd();
                }
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RESULT
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map133 = iprot.readMapBegin();
                  struct.result = new java.util.HashMap<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>>(2*_map133.size);
                  int _key134;
                  @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.Double>> _val135;
                  for (int _i136 = 0; _i136 < _map133.size; ++_i136)
                  {
                    _key134 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TSet _set137 = iprot.readSetBegin();
                      _val135 = new java.util.HashSet<java.util.List<java.lang.Double>>(2*_set137.size);
                      @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem138;
                      for (int _i139 = 0; _i139 < _set137.size; ++_i139)
                      {
                        {
                          org.apache.thrift.protocol.TList _list140 = iprot.readListBegin();
                          _elem138 = new java.util.ArrayList<java.lang.Double>(_list140.size);
                          double _elem141;
                          for (int _i142 = 0; _i142 < _list140.size; ++_i142)
                          {
                            _elem141 = iprot.readDouble();
                            _elem138.add(_elem141);
                          }
                          iprot.readListEnd();
                        }
                        _val135.add(_elem138);
                      }
                      iprot.readSetEnd();
                    }
                    struct.result.put(_key134, _val135);
                  }
                  iprot.readMapEnd();
                }
                struct.setResultIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getExternalData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.LIST, org.apache.thrift.protocol.TType.I32, struct.status.size()));
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> _iter143 : struct.status.entrySet())
            {
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter143.getKey().size()));
                for (double _iter144 : _iter143.getKey())
                {
                  oprot.writeDouble(_iter144);
                }
                oprot.writeListEnd();
              }
              oprot.writeI32(_iter143.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.result != null) {
          oprot.writeFieldBegin(RESULT_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, struct.result.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.util.List<java.lang.Double>>> _iter145 : struct.result.entrySet())
            {
              oprot.writeI32(_iter145.getKey());
              {
                oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.LIST, _iter145.getValue().size()));
                for (java.util.List<java.lang.Double> _iter146 : _iter145.getValue())
                {
                  {
                    oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter146.size()));
                    for (double _iter147 : _iter146)
                    {
                      oprot.writeDouble(_iter147);
                    }
                    oprot.writeListEnd();
                  }
                }
                oprot.writeSetEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExternalData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_argsTupleScheme getScheme() {
        return new getExternalData_argsTupleScheme();
      }
    }

    private static class getExternalData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExternalData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExternalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetStatus()) {
          optionals.set(0);
        }
        if (struct.isSetResult()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetStatus()) {
          {
            oprot.writeI32(struct.status.size());
            for (java.util.Map.Entry<java.util.List<java.lang.Double>, java.lang.Integer> _iter148 : struct.status.entrySet())
            {
              {
                oprot.writeI32(_iter148.getKey().size());
                for (double _iter149 : _iter148.getKey())
                {
                  oprot.writeDouble(_iter149);
                }
              }
              oprot.writeI32(_iter148.getValue());
            }
          }
        }
        if (struct.isSetResult()) {
          {
            oprot.writeI32(struct.result.size());
            for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.util.List<java.lang.Double>>> _iter150 : struct.result.entrySet())
            {
              oprot.writeI32(_iter150.getKey());
              {
                oprot.writeI32(_iter150.getValue().size());
                for (java.util.List<java.lang.Double> _iter151 : _iter150.getValue())
                {
                  {
                    oprot.writeI32(_iter151.size());
                    for (double _iter152 : _iter151)
                    {
                      oprot.writeDouble(_iter152);
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExternalData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map153 = iprot.readMapBegin();
            struct.status = new java.util.HashMap<java.util.List<java.lang.Double>,java.lang.Integer>(2*_map153.size);
            @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _key154;
            int _val155;
            for (int _i156 = 0; _i156 < _map153.size; ++_i156)
            {
              {
                org.apache.thrift.protocol.TList _list157 = iprot.readListBegin();
                _key154 = new java.util.ArrayList<java.lang.Double>(_list157.size);
                double _elem158;
                for (int _i159 = 0; _i159 < _list157.size; ++_i159)
                {
                  _elem158 = iprot.readDouble();
                  _key154.add(_elem158);
                }
              }
              _val155 = iprot.readI32();
              struct.status.put(_key154, _val155);
            }
          }
          struct.setStatusIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map160 = iprot.readMapBegin();
            struct.result = new java.util.HashMap<java.lang.Integer,java.util.Set<java.util.List<java.lang.Double>>>(2*_map160.size);
            int _key161;
            @org.apache.thrift.annotation.Nullable java.util.Set<java.util.List<java.lang.Double>> _val162;
            for (int _i163 = 0; _i163 < _map160.size; ++_i163)
            {
              _key161 = iprot.readI32();
              {
                org.apache.thrift.protocol.TSet _set164 = iprot.readSetBegin();
                _val162 = new java.util.HashSet<java.util.List<java.lang.Double>>(2*_set164.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem165;
                for (int _i166 = 0; _i166 < _set164.size; ++_i166)
                {
                  {
                    org.apache.thrift.protocol.TList _list167 = iprot.readListBegin();
                    _elem165 = new java.util.ArrayList<java.lang.Double>(_list167.size);
                    double _elem168;
                    for (int _i169 = 0; _i169 < _list167.size; ++_i169)
                    {
                      _elem168 = iprot.readDouble();
                      _elem165.add(_elem168);
                    }
                  }
                  _val162.add(_elem165);
                }
              }
              struct.result.put(_key161, _val162);
            }
          }
          struct.setResultIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class getExternalData_result implements org.apache.thrift.TBase<getExternalData_result, getExternalData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getExternalData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getExternalData_result");

    private static final org.apache.thrift.protocol.TField INVALID_FIELD_DESC = new org.apache.thrift.protocol.TField("invalid", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getExternalData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getExternalData_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable InvalidException invalid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INVALID((short)1, "invalid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INVALID
            return INVALID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INVALID, new org.apache.thrift.meta_data.FieldMetaData("invalid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, InvalidException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getExternalData_result.class, metaDataMap);
    }

    public getExternalData_result() {
    }

    public getExternalData_result(
      InvalidException invalid)
    {
      this();
      this.invalid = invalid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExternalData_result(getExternalData_result other) {
      if (other.isSetInvalid()) {
        this.invalid = new InvalidException(other.invalid);
      }
    }

    @Override
    public getExternalData_result deepCopy() {
      return new getExternalData_result(this);
    }

    @Override
    public void clear() {
      this.invalid = null;
    }

    @org.apache.thrift.annotation.Nullable
    public InvalidException getInvalid() {
      return this.invalid;
    }

    public getExternalData_result setInvalid(@org.apache.thrift.annotation.Nullable InvalidException invalid) {
      this.invalid = invalid;
      return this;
    }

    public void unsetInvalid() {
      this.invalid = null;
    }

    /** Returns true if field invalid is set (has been assigned a value) and false otherwise */
    public boolean isSetInvalid() {
      return this.invalid != null;
    }

    public void setInvalidIsSet(boolean value) {
      if (!value) {
        this.invalid = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case INVALID:
        if (value == null) {
          unsetInvalid();
        } else {
          setInvalid((InvalidException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case INVALID:
        return getInvalid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case INVALID:
        return isSetInvalid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getExternalData_result)
        return this.equals((getExternalData_result)that);
      return false;
    }

    public boolean equals(getExternalData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_invalid = true && this.isSetInvalid();
      boolean that_present_invalid = true && that.isSetInvalid();
      if (this_present_invalid || that_present_invalid) {
        if (!(this_present_invalid && that_present_invalid))
          return false;
        if (!this.invalid.equals(that.invalid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetInvalid()) ? 131071 : 524287);
      if (isSetInvalid())
        hashCode = hashCode * 8191 + invalid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getExternalData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetInvalid(), other.isSetInvalid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvalid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalid, other.invalid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getExternalData_result(");
      boolean first = true;

      sb.append("invalid:");
      if (this.invalid == null) {
        sb.append("null");
      } else {
        sb.append(this.invalid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getExternalData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_resultStandardScheme getScheme() {
        return new getExternalData_resultStandardScheme();
      }
    }

    private static class getExternalData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getExternalData_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, getExternalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INVALID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.invalid = new InvalidException();
                struct.invalid.read(iprot);
                struct.setInvalidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, getExternalData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.invalid != null) {
          oprot.writeFieldBegin(INVALID_FIELD_DESC);
          struct.invalid.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getExternalData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public getExternalData_resultTupleScheme getScheme() {
        return new getExternalData_resultTupleScheme();
      }
    }

    private static class getExternalData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getExternalData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getExternalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetInvalid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInvalid()) {
          struct.invalid.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getExternalData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.invalid = new InvalidException();
          struct.invalid.read(iprot);
          struct.setInvalidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
