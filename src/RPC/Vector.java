/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package RPC;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.0)", date = "2023-04-09")
public class Vector implements org.apache.thrift.TBase<Vector, Vector._Fields>, java.io.Serializable, Cloneable, Comparable<Vector> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Vector");

  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ARRIVAL_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalTime", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SLIDE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("slideID", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new VectorStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new VectorTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> values; // required
  public int arrivalTime; // required
  public int slideID; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VALUES((short)1, "values"),
    ARRIVAL_TIME((short)2, "arrivalTime"),
    SLIDE_ID((short)3, "slideID");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VALUES
          return VALUES;
        case 2: // ARRIVAL_TIME
          return ARRIVAL_TIME;
        case 3: // SLIDE_ID
          return SLIDE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARRIVALTIME_ISSET_ID = 0;
  private static final int __SLIDEID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ARRIVAL_TIME, new org.apache.thrift.meta_data.FieldMetaData("arrivalTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLIDE_ID, new org.apache.thrift.meta_data.FieldMetaData("slideID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Vector.class, metaDataMap);
  }

  public Vector() {
  }

  public Vector(
    java.util.List<java.lang.Double> values,
    int arrivalTime,
    int slideID)
  {
    this();
    this.values = values;
    this.arrivalTime = arrivalTime;
    setArrivalTimeIsSet(true);
    this.slideID = slideID;
    setSlideIDIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Vector(Vector other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetValues()) {
      java.util.List<java.lang.Double> __this__values = new java.util.ArrayList<java.lang.Double>(other.values);
      this.values = __this__values;
    }
    this.arrivalTime = other.arrivalTime;
    this.slideID = other.slideID;
  }

  @Override
  public Vector deepCopy() {
    return new Vector(this);
  }

  @Override
  public void clear() {
    this.values = null;
    setArrivalTimeIsSet(false);
    this.arrivalTime = 0;
    setSlideIDIsSet(false);
    this.slideID = 0;
  }

  public int getValuesSize() {
    return (this.values == null) ? 0 : this.values.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getValuesIterator() {
    return (this.values == null) ? null : this.values.iterator();
  }

  public void addToValues(double elem) {
    if (this.values == null) {
      this.values = new java.util.ArrayList<java.lang.Double>();
    }
    this.values.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getValues() {
    return this.values;
  }

  public Vector setValues(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> values) {
    this.values = values;
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public int getArrivalTime() {
    return this.arrivalTime;
  }

  public Vector setArrivalTime(int arrivalTime) {
    this.arrivalTime = arrivalTime;
    setArrivalTimeIsSet(true);
    return this;
  }

  public void unsetArrivalTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARRIVALTIME_ISSET_ID);
  }

  /** Returns true if field arrivalTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARRIVALTIME_ISSET_ID);
  }

  public void setArrivalTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARRIVALTIME_ISSET_ID, value);
  }

  public int getSlideID() {
    return this.slideID;
  }

  public Vector setSlideID(int slideID) {
    this.slideID = slideID;
    setSlideIDIsSet(true);
    return this;
  }

  public void unsetSlideID() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SLIDEID_ISSET_ID);
  }

  /** Returns true if field slideID is set (has been assigned a value) and false otherwise */
  public boolean isSetSlideID() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SLIDEID_ISSET_ID);
  }

  public void setSlideIDIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SLIDEID_ISSET_ID, value);
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((java.util.List<java.lang.Double>)value);
      }
      break;

    case ARRIVAL_TIME:
      if (value == null) {
        unsetArrivalTime();
      } else {
        setArrivalTime((java.lang.Integer)value);
      }
      break;

    case SLIDE_ID:
      if (value == null) {
        unsetSlideID();
      } else {
        setSlideID((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VALUES:
      return getValues();

    case ARRIVAL_TIME:
      return getArrivalTime();

    case SLIDE_ID:
      return getSlideID();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VALUES:
      return isSetValues();
    case ARRIVAL_TIME:
      return isSetArrivalTime();
    case SLIDE_ID:
      return isSetSlideID();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Vector)
      return this.equals((Vector)that);
    return false;
  }

  public boolean equals(Vector that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    boolean this_present_arrivalTime = true;
    boolean that_present_arrivalTime = true;
    if (this_present_arrivalTime || that_present_arrivalTime) {
      if (!(this_present_arrivalTime && that_present_arrivalTime))
        return false;
      if (this.arrivalTime != that.arrivalTime)
        return false;
    }

    boolean this_present_slideID = true;
    boolean that_present_slideID = true;
    if (this_present_slideID || that_present_slideID) {
      if (!(this_present_slideID && that_present_slideID))
        return false;
      if (this.slideID != that.slideID)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetValues()) ? 131071 : 524287);
    if (isSetValues())
      hashCode = hashCode * 8191 + values.hashCode();

    hashCode = hashCode * 8191 + arrivalTime;

    hashCode = hashCode * 8191 + slideID;

    return hashCode;
  }

  @Override
  public int compareTo(Vector other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetValues(), other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArrivalTime(), other.isSetArrivalTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalTime, other.arrivalTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSlideID(), other.isSetSlideID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlideID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slideID, other.slideID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Vector(");
    boolean first = true;

    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      sb.append(this.values);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrivalTime:");
    sb.append(this.arrivalTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slideID:");
    sb.append(this.slideID);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class VectorStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VectorStandardScheme getScheme() {
      return new VectorStandardScheme();
    }
  }

  private static class VectorStandardScheme extends org.apache.thrift.scheme.StandardScheme<Vector> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, Vector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.values = new java.util.ArrayList<java.lang.Double>(_list26.size);
                double _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readDouble();
                  struct.values.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARRIVAL_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.arrivalTime = iprot.readI32();
              struct.setArrivalTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLIDE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.slideID = iprot.readI32();
              struct.setSlideIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, Vector struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.values.size()));
          for (double _iter29 : struct.values)
          {
            oprot.writeDouble(_iter29);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARRIVAL_TIME_FIELD_DESC);
      oprot.writeI32(struct.arrivalTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SLIDE_ID_FIELD_DESC);
      oprot.writeI32(struct.slideID);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class VectorTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public VectorTupleScheme getScheme() {
      return new VectorTupleScheme();
    }
  }

  private static class VectorTupleScheme extends org.apache.thrift.scheme.TupleScheme<Vector> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Vector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetValues()) {
        optionals.set(0);
      }
      if (struct.isSetArrivalTime()) {
        optionals.set(1);
      }
      if (struct.isSetSlideID()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetValues()) {
        {
          oprot.writeI32(struct.values.size());
          for (double _iter30 : struct.values)
          {
            oprot.writeDouble(_iter30);
          }
        }
      }
      if (struct.isSetArrivalTime()) {
        oprot.writeI32(struct.arrivalTime);
      }
      if (struct.isSetSlideID()) {
        oprot.writeI32(struct.slideID);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Vector struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
          struct.values = new java.util.ArrayList<java.lang.Double>(_list31.size);
          double _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readDouble();
            struct.values.add(_elem32);
          }
        }
        struct.setValuesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.arrivalTime = iprot.readI32();
        struct.setArrivalTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.slideID = iprot.readI32();
        struct.setSlideIDIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

