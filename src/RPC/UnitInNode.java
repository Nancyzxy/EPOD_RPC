/**
 * Autogenerated by Thrift Compiler (0.18.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package RPC;

import Framework.EdgeNodeNetwork;
import utils.Constants;

import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.0)", date = "2023-04-09")
public class UnitInNode implements org.apache.thrift.TBase<UnitInNode, UnitInNode._Fields>, java.io.Serializable, Cloneable, Comparable<UnitInNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnitInNode");

  private static final org.apache.thrift.protocol.TField UNIT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unitID", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField POINT_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("pointCnt", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IS_SAFE_FIELD_DESC = new org.apache.thrift.protocol.TField("isSafe", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DELTA_CNT_FIELD_DESC = new org.apache.thrift.protocol.TField("deltaCnt", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_UPDATED_FIELD_DESC = new org.apache.thrift.protocol.TField("isUpdated", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField BELONGED_DEVICES_FIELD_DESC = new org.apache.thrift.protocol.TField("belongedDevices", org.apache.thrift.protocol.TType.SET, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UnitInNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UnitInNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> unitID; // required
  public int pointCnt; // required
  public int isSafe; // required
  public int deltaCnt; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> isUpdated; // required
  public @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> belongedDevices; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UNIT_ID((short)1, "unitID"),
    POINT_CNT((short)2, "pointCnt"),
    IS_SAFE((short)3, "isSafe"),
    DELTA_CNT((short)4, "deltaCnt"),
    IS_UPDATED((short)5, "isUpdated"),
    BELONGED_DEVICES((short)6, "belongedDevices");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UNIT_ID
          return UNIT_ID;
        case 2: // POINT_CNT
          return POINT_CNT;
        case 3: // IS_SAFE
          return IS_SAFE;
        case 4: // DELTA_CNT
          return DELTA_CNT;
        case 5: // IS_UPDATED
          return IS_UPDATED;
        case 6: // BELONGED_DEVICES
          return BELONGED_DEVICES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POINTCNT_ISSET_ID = 0;
  private static final int __ISSAFE_ISSET_ID = 1;
  private static final int __DELTACNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UNIT_ID, new org.apache.thrift.meta_data.FieldMetaData("unitID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.POINT_CNT, new org.apache.thrift.meta_data.FieldMetaData("pointCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_SAFE, new org.apache.thrift.meta_data.FieldMetaData("isSafe", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELTA_CNT, new org.apache.thrift.meta_data.FieldMetaData("deltaCnt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_UPDATED, new org.apache.thrift.meta_data.FieldMetaData("isUpdated", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.BELONGED_DEVICES, new org.apache.thrift.meta_data.FieldMetaData("belongedDevices", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnitInNode.class, metaDataMap);
  }

  public UnitInNode() {
  }
  public UnitInNode(List<Double> unitID, int pointCnt) {
    this.unitID = unitID;
    this.pointCnt = pointCnt;
    this.deltaCnt = 0;
    this.isUpdated = new HashMap<>();
    for (Integer hashcode : EdgeNodeNetwork.nodeHashMap.keySet()) {
      // initially we put 1 into it, indicating the first time we need to get the data
      isUpdated.put(hashcode, 1);
    }
    this.belongedDevices = Collections.synchronizedSet(new HashSet<>());
  }

  public UnitInNode(
    java.util.List<java.lang.Double> unitID,
    int pointCnt,
    int isSafe,
    int deltaCnt,
    java.util.Map<java.lang.Integer,java.lang.Integer> isUpdated,
    java.util.Set<java.lang.Integer> belongedDevices)
  {
    this();
    this.unitID = unitID;
    this.pointCnt = pointCnt;
    setPointCntIsSet(true);
    this.isSafe = isSafe;
    setIsSafeIsSet(true);
    this.deltaCnt = deltaCnt;
    setDeltaCntIsSet(true);
    this.isUpdated = isUpdated;
    this.belongedDevices = belongedDevices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UnitInNode(UnitInNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUnitID()) {
      java.util.List<java.lang.Double> __this__unitID = new java.util.ArrayList<java.lang.Double>(other.unitID);
      this.unitID = __this__unitID;
    }
    this.pointCnt = other.pointCnt;
    this.isSafe = other.isSafe;
    this.deltaCnt = other.deltaCnt;
    if (other.isSetIsUpdated()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__isUpdated = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.isUpdated);
      this.isUpdated = __this__isUpdated;
    }
    if (other.isSetBelongedDevices()) {
      java.util.Set<java.lang.Integer> __this__belongedDevices = new java.util.HashSet<java.lang.Integer>(other.belongedDevices);
      this.belongedDevices = __this__belongedDevices;
    }
  }

  @Override
  public UnitInNode deepCopy() {
    return new UnitInNode(this);
  }

  @Override
  public void clear() {
    this.unitID = null;
    setPointCntIsSet(false);
    this.pointCnt = 0;
    setIsSafeIsSet(false);
    this.isSafe = 0;
    setDeltaCntIsSet(false);
    this.deltaCnt = 0;
    this.isUpdated = null;
    this.belongedDevices = null;
  }

  /* update safeness */
  public void updateSafeness() {
    if (pointCnt > Constants.K) {
      this.isSafe = 2;
    } else {
      this.isSafe = 1;
    }
  }


  public synchronized void update() {
    isUpdated.replaceAll((k, v) -> 1);
  }

  public synchronized void updateCount(int cnt) {
    this.pointCnt += cnt;
  }

  int n = 0;

  public synchronized void updateDeltaCount(int cnt) {
    if (this.n == Constants.dn) {
      this.n = 0;
      this.deltaCnt = 0;
    }
    this.deltaCnt += cnt;
    this.n++;
  }


  public int getUnitIDSize() {
    return (this.unitID == null) ? 0 : this.unitID.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Double> getUnitIDIterator() {
    return (this.unitID == null) ? null : this.unitID.iterator();
  }

  public void addToUnitID(double elem) {
    if (this.unitID == null) {
      this.unitID = new java.util.ArrayList<java.lang.Double>();
    }
    this.unitID.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Double> getUnitID() {
    return this.unitID;
  }

  public UnitInNode setUnitID(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> unitID) {
    this.unitID = unitID;
    return this;
  }

  public void unsetUnitID() {
    this.unitID = null;
  }

  /** Returns true if field unitID is set (has been assigned a value) and false otherwise */
  public boolean isSetUnitID() {
    return this.unitID != null;
  }

  public void setUnitIDIsSet(boolean value) {
    if (!value) {
      this.unitID = null;
    }
  }

  public int getPointCnt() {
    return this.pointCnt;
  }

  public UnitInNode setPointCnt(int pointCnt) {
    this.pointCnt = pointCnt;
    setPointCntIsSet(true);
    return this;
  }

  public void unsetPointCnt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POINTCNT_ISSET_ID);
  }

  /** Returns true if field pointCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetPointCnt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POINTCNT_ISSET_ID);
  }

  public void setPointCntIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POINTCNT_ISSET_ID, value);
  }

  public int getIsSafe() {
    return this.isSafe;
  }

  public UnitInNode setIsSafe(int isSafe) {
    this.isSafe = isSafe;
    setIsSafeIsSet(true);
    return this;
  }

  public void unsetIsSafe() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSAFE_ISSET_ID);
  }

  /** Returns true if field isSafe is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSafe() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSAFE_ISSET_ID);
  }

  public void setIsSafeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSAFE_ISSET_ID, value);
  }

  public int getDeltaCnt() {
    return this.deltaCnt;
  }

  public UnitInNode setDeltaCnt(int deltaCnt) {
    this.deltaCnt = deltaCnt;
    setDeltaCntIsSet(true);
    return this;
  }

  public void unsetDeltaCnt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELTACNT_ISSET_ID);
  }

  /** Returns true if field deltaCnt is set (has been assigned a value) and false otherwise */
  public boolean isSetDeltaCnt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELTACNT_ISSET_ID);
  }

  public void setDeltaCntIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELTACNT_ISSET_ID, value);
  }

  public int getIsUpdatedSize() {
    return (this.isUpdated == null) ? 0 : this.isUpdated.size();
  }

  public void putToIsUpdated(int key, int val) {
    if (this.isUpdated == null) {
      this.isUpdated = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.isUpdated.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getIsUpdated() {
    return this.isUpdated;
  }

  public UnitInNode setIsUpdated(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> isUpdated) {
    this.isUpdated = isUpdated;
    return this;
  }

  public void unsetIsUpdated() {
    this.isUpdated = null;
  }

  /** Returns true if field isUpdated is set (has been assigned a value) and false otherwise */
  public boolean isSetIsUpdated() {
    return this.isUpdated != null;
  }

  public void setIsUpdatedIsSet(boolean value) {
    if (!value) {
      this.isUpdated = null;
    }
  }

  public int getBelongedDevicesSize() {
    return (this.belongedDevices == null) ? 0 : this.belongedDevices.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getBelongedDevicesIterator() {
    return (this.belongedDevices == null) ? null : this.belongedDevices.iterator();
  }

  public void addToBelongedDevices(int elem) {
    if (this.belongedDevices == null) {
      this.belongedDevices = new java.util.HashSet<java.lang.Integer>();
    }
    this.belongedDevices.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Set<java.lang.Integer> getBelongedDevices() {
    return this.belongedDevices;
  }

  public UnitInNode setBelongedDevices(@org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> belongedDevices) {
    this.belongedDevices = belongedDevices;
    return this;
  }

  public void unsetBelongedDevices() {
    this.belongedDevices = null;
  }

  /** Returns true if field belongedDevices is set (has been assigned a value) and false otherwise */
  public boolean isSetBelongedDevices() {
    return this.belongedDevices != null;
  }

  public void setBelongedDevicesIsSet(boolean value) {
    if (!value) {
      this.belongedDevices = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UNIT_ID:
      if (value == null) {
        unsetUnitID();
      } else {
        setUnitID((java.util.List<java.lang.Double>)value);
      }
      break;

    case POINT_CNT:
      if (value == null) {
        unsetPointCnt();
      } else {
        setPointCnt((java.lang.Integer)value);
      }
      break;

    case IS_SAFE:
      if (value == null) {
        unsetIsSafe();
      } else {
        setIsSafe((java.lang.Integer)value);
      }
      break;

    case DELTA_CNT:
      if (value == null) {
        unsetDeltaCnt();
      } else {
        setDeltaCnt((java.lang.Integer)value);
      }
      break;

    case IS_UPDATED:
      if (value == null) {
        unsetIsUpdated();
      } else {
        setIsUpdated((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case BELONGED_DEVICES:
      if (value == null) {
        unsetBelongedDevices();
      } else {
        setBelongedDevices((java.util.Set<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UNIT_ID:
      return getUnitID();

    case POINT_CNT:
      return getPointCnt();

    case IS_SAFE:
      return getIsSafe();

    case DELTA_CNT:
      return getDeltaCnt();

    case IS_UPDATED:
      return getIsUpdated();

    case BELONGED_DEVICES:
      return getBelongedDevices();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UNIT_ID:
      return isSetUnitID();
    case POINT_CNT:
      return isSetPointCnt();
    case IS_SAFE:
      return isSetIsSafe();
    case DELTA_CNT:
      return isSetDeltaCnt();
    case IS_UPDATED:
      return isSetIsUpdated();
    case BELONGED_DEVICES:
      return isSetBelongedDevices();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof UnitInNode)
      return this.equals((UnitInNode)that);
    return false;
  }

  public boolean equals(UnitInNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_unitID = true && this.isSetUnitID();
    boolean that_present_unitID = true && that.isSetUnitID();
    if (this_present_unitID || that_present_unitID) {
      if (!(this_present_unitID && that_present_unitID))
        return false;
      if (!this.unitID.equals(that.unitID))
        return false;
    }

    boolean this_present_pointCnt = true;
    boolean that_present_pointCnt = true;
    if (this_present_pointCnt || that_present_pointCnt) {
      if (!(this_present_pointCnt && that_present_pointCnt))
        return false;
      if (this.pointCnt != that.pointCnt)
        return false;
    }

    boolean this_present_isSafe = true;
    boolean that_present_isSafe = true;
    if (this_present_isSafe || that_present_isSafe) {
      if (!(this_present_isSafe && that_present_isSafe))
        return false;
      if (this.isSafe != that.isSafe)
        return false;
    }

    boolean this_present_deltaCnt = true;
    boolean that_present_deltaCnt = true;
    if (this_present_deltaCnt || that_present_deltaCnt) {
      if (!(this_present_deltaCnt && that_present_deltaCnt))
        return false;
      if (this.deltaCnt != that.deltaCnt)
        return false;
    }

    boolean this_present_isUpdated = true && this.isSetIsUpdated();
    boolean that_present_isUpdated = true && that.isSetIsUpdated();
    if (this_present_isUpdated || that_present_isUpdated) {
      if (!(this_present_isUpdated && that_present_isUpdated))
        return false;
      if (!this.isUpdated.equals(that.isUpdated))
        return false;
    }

    boolean this_present_belongedDevices = true && this.isSetBelongedDevices();
    boolean that_present_belongedDevices = true && that.isSetBelongedDevices();
    if (this_present_belongedDevices || that_present_belongedDevices) {
      if (!(this_present_belongedDevices && that_present_belongedDevices))
        return false;
      if (!this.belongedDevices.equals(that.belongedDevices))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUnitID()) ? 131071 : 524287);
    if (isSetUnitID())
      hashCode = hashCode * 8191 + unitID.hashCode();

    hashCode = hashCode * 8191 + pointCnt;

    hashCode = hashCode * 8191 + isSafe;

    hashCode = hashCode * 8191 + deltaCnt;

    hashCode = hashCode * 8191 + ((isSetIsUpdated()) ? 131071 : 524287);
    if (isSetIsUpdated())
      hashCode = hashCode * 8191 + isUpdated.hashCode();

    hashCode = hashCode * 8191 + ((isSetBelongedDevices()) ? 131071 : 524287);
    if (isSetBelongedDevices())
      hashCode = hashCode * 8191 + belongedDevices.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UnitInNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUnitID(), other.isSetUnitID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnitID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unitID, other.unitID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPointCnt(), other.isSetPointCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPointCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pointCnt, other.pointCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsSafe(), other.isSetIsSafe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSafe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSafe, other.isSafe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDeltaCnt(), other.isSetDeltaCnt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeltaCnt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deltaCnt, other.deltaCnt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsUpdated(), other.isSetIsUpdated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsUpdated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isUpdated, other.isUpdated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBelongedDevices(), other.isSetBelongedDevices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBelongedDevices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.belongedDevices, other.belongedDevices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UnitInNode(");
    boolean first = true;

    sb.append("unitID:");
    if (this.unitID == null) {
      sb.append("null");
    } else {
      sb.append(this.unitID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pointCnt:");
    sb.append(this.pointCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSafe:");
    sb.append(this.isSafe);
    first = false;
    if (!first) sb.append(", ");
    sb.append("deltaCnt:");
    sb.append(this.deltaCnt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isUpdated:");
    if (this.isUpdated == null) {
      sb.append("null");
    } else {
      sb.append(this.isUpdated);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("belongedDevices:");
    if (this.belongedDevices == null) {
      sb.append("null");
    } else {
      sb.append(this.belongedDevices);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UnitInNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UnitInNodeStandardScheme getScheme() {
      return new UnitInNodeStandardScheme();
    }
  }

  private static class UnitInNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<UnitInNode> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, UnitInNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UNIT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.unitID = new java.util.ArrayList<java.lang.Double>(_list0.size);
                double _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readDouble();
                  struct.unitID.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setUnitIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POINT_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pointCnt = iprot.readI32();
              struct.setPointCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_SAFE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isSafe = iprot.readI32();
              struct.setIsSafeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELTA_CNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deltaCnt = iprot.readI32();
              struct.setDeltaCntIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_UPDATED
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.isUpdated = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map3.size);
                int _key4;
                int _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readI32();
                  _val5 = iprot.readI32();
                  struct.isUpdated.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setIsUpdatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BELONGED_DEVICES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set7 = iprot.readSetBegin();
                struct.belongedDevices = new java.util.HashSet<java.lang.Integer>(2*_set7.size);
                int _elem8;
                for (int _i9 = 0; _i9 < _set7.size; ++_i9)
                {
                  _elem8 = iprot.readI32();
                  struct.belongedDevices.add(_elem8);
                }
                iprot.readSetEnd();
              }
              struct.setBelongedDevicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, UnitInNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.unitID != null) {
        oprot.writeFieldBegin(UNIT_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.unitID.size()));
          for (double _iter10 : struct.unitID)
          {
            oprot.writeDouble(_iter10);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POINT_CNT_FIELD_DESC);
      oprot.writeI32(struct.pointCnt);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SAFE_FIELD_DESC);
      oprot.writeI32(struct.isSafe);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DELTA_CNT_FIELD_DESC);
      oprot.writeI32(struct.deltaCnt);
      oprot.writeFieldEnd();
      if (struct.isUpdated != null) {
        oprot.writeFieldBegin(IS_UPDATED_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.isUpdated.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter11 : struct.isUpdated.entrySet())
          {
            oprot.writeI32(_iter11.getKey());
            oprot.writeI32(_iter11.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.belongedDevices != null) {
        oprot.writeFieldBegin(BELONGED_DEVICES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.belongedDevices.size()));
          for (int _iter12 : struct.belongedDevices)
          {
            oprot.writeI32(_iter12);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UnitInNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public UnitInNodeTupleScheme getScheme() {
      return new UnitInNodeTupleScheme();
    }
  }

  private static class UnitInNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<UnitInNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UnitInNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUnitID()) {
        optionals.set(0);
      }
      if (struct.isSetPointCnt()) {
        optionals.set(1);
      }
      if (struct.isSetIsSafe()) {
        optionals.set(2);
      }
      if (struct.isSetDeltaCnt()) {
        optionals.set(3);
      }
      if (struct.isSetIsUpdated()) {
        optionals.set(4);
      }
      if (struct.isSetBelongedDevices()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetUnitID()) {
        {
          oprot.writeI32(struct.unitID.size());
          for (double _iter13 : struct.unitID)
          {
            oprot.writeDouble(_iter13);
          }
        }
      }
      if (struct.isSetPointCnt()) {
        oprot.writeI32(struct.pointCnt);
      }
      if (struct.isSetIsSafe()) {
        oprot.writeI32(struct.isSafe);
      }
      if (struct.isSetDeltaCnt()) {
        oprot.writeI32(struct.deltaCnt);
      }
      if (struct.isSetIsUpdated()) {
        {
          oprot.writeI32(struct.isUpdated.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter14 : struct.isUpdated.entrySet())
          {
            oprot.writeI32(_iter14.getKey());
            oprot.writeI32(_iter14.getValue());
          }
        }
      }
      if (struct.isSetBelongedDevices()) {
        {
          oprot.writeI32(struct.belongedDevices.size());
          for (int _iter15 : struct.belongedDevices)
          {
            oprot.writeI32(_iter15);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UnitInNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
          struct.unitID = new java.util.ArrayList<java.lang.Double>(_list16.size);
          double _elem17;
          for (int _i18 = 0; _i18 < _list16.size; ++_i18)
          {
            _elem17 = iprot.readDouble();
            struct.unitID.add(_elem17);
          }
        }
        struct.setUnitIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pointCnt = iprot.readI32();
        struct.setPointCntIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isSafe = iprot.readI32();
        struct.setIsSafeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.deltaCnt = iprot.readI32();
        struct.setDeltaCntIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map19 = iprot.readMapBegin();
          struct.isUpdated = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map19.size);
          int _key20;
          int _val21;
          for (int _i22 = 0; _i22 < _map19.size; ++_i22)
          {
            _key20 = iprot.readI32();
            _val21 = iprot.readI32();
            struct.isUpdated.put(_key20, _val21);
          }
        }
        struct.setIsUpdatedIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set23 = iprot.readSetBegin();
          struct.belongedDevices = new java.util.HashSet<java.lang.Integer>(2*_set23.size);
          int _elem24;
          for (int _i25 = 0; _i25 < _set23.size; ++_i25)
          {
            _elem24 = iprot.readI32();
            struct.belongedDevices.add(_elem24);
          }
        }
        struct.setBelongedDevicesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

